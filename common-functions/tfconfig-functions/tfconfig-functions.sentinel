# Common functions that use the tfconfig/v2 import

##### Imports #####
import "tfconfig/v2" as tfconfig
import "strings"
import "types"

##### Functions #####

### find_all_resources ###
# Find all resources of all types using the tfconfig/v2 import.
find_all_resources = func() {
  resources = filter tfconfig.resources as address, r {
  	r.mode is "managed"
  }

  return resources
}

### find_resources_by_type ###
# Find all resources of a specific type using the tfconfig/v2 import.
# The parameter, type, should be a string like "aws_instance".
find_resources_by_type = func(type) {
  resources = filter tfconfig.resources as address, r {
  	r.type is type and
  	r.mode is "managed"
  }

  return resources
}

### find_resources_in_module ###
# Find all resources from a specific module using the tfconfig/v2 import.
find_resources_in_module = func(module_address) {
  resources = filter tfconfig.resources as address, r {
  	r.module_address is module_address and
  	r.mode is "managed"
  }

  return resources
}

### find_resources_by_provider ###
# Find all resources from a specific provider using the tfconfig/v2 import.
# The parameter, provider, should be given as a string such as "aws".
find_resources_by_provider = func(provider) {
  resources = filter tfconfig.resources as address, r {
  	r.provider_config_key matches "(.*)" + provider + "(.*)" and
  	r.mode is "managed"
  }

  return resources
}

### find_all_datasources ###
# Find all data sources of all types using the tfconfig/v2 import.
find_all_datasources = func() {
  datasources = filter tfconfig.resources as address, d {
  	d.mode is "data"
  }

  return datasources
}

### find_datasources_by_type ###
# Find all data sources of a specific type using the tfconfig/v2 import.
# The parameter, type, should be a string like "aws_ami".
find_datasources_by_type = func(type) {
  datasources = filter tfconfig.resources as address, d {
  	d.type is type and
  	d.mode is "data"
  }

  return datasources
}

### find_datasources_in_module ###
# Find all data sources from a specific module using the tfconfig/v2 import.
find_datasources_in_module = func(module_address) {
  datasources = filter tfconfig.resources as address, d {
  	d.module_address is module_address and
  	d.mode is "data"
  }

  return datasources
}

### find_datasources_by_provider ###
# Find all data sources from a specific provider using the tfconfig/v2 import.
# The parameter, provider, should be given as a string such as "aws".
find_datasources_by_provider = func(provider) {
  datasources = filter tfconfig.resources as address, d {
  	d.provider_config_key matches "(.*)" + provider + "(.*)" and
  	d.mode is "data"
  }

  return datasources
}

### find_all_provisioners ###
# Find all provisioners using the tfconfig/v2 import.
find_all_provisioners = func() {
  return tfconfig.provisioners
}

### find_provisioners_by_type ###
# Find all provisioners of a specific type using the tfconfig/v2 import.
# The parameter, type, should be a string like "local_exec".
find_provisioners_by_type = func(type) {
  provisioners = filter tfconfig.provisioners as address, p {
  	p.type is type
  }

  return provisioners
}

### find_all_providers ###
# Find all providers using the tfconfig/v2 import.
find_all_providers = func() {
  return tfconfig.providers
}

### find_providers_by_type ###
# Find all providers of a specific type using the tfconfig/v2 import.
# The parameter, provider, should be given as a string such as "aws".
find_providers_by_type = func(type) {
  providers = filter tfconfig.providers as address, p {
  	p.provider_config_key matches "(.*)" + type + "(.*)"
  }

  return providers
}

### find_providers_in_module ###
# Find all providers from a specific module using the tfconfig/v2 import.
find_providers_in_module = func(module_address) {
  providers = filter tfconfig.providers as address, p {
  	p.module_address is module_address
  }

  return providers
}

### find_all_variables ###
# Find all variables using the tfconfig/v2 import.
find_all_variables = func() {
  return tfconfig.variables
}

### find_variables_in_module ###
# Find all variables from a specific module using the tfconfig/v2 import.
find_variables_in_module = func(module_address) {
  variables = filter tfconfig.variables as address, v {
  	v.module_address is module_address
  }

  return variables
}

### find_all_outputs ###
# Find all outputs using the tfconfig/v2 import.
find_all_outputs = func() {
  return tfconfig.outputs
}

### find_outputs_in_module ###
# Find all providers from a specific module using the tfconfig/v2 import.
find_outputs_in_module = func(module_address) {
  outputs = filter tfconfig.outputs as address, o {
  	o.module_address is module_address
  }

  return outputs
}

### find_outputs_by_sensitivity ###
# Find all providers of specific sensitivity using the tfconfig/v2 import.
# The parameter, sensitive, should be true or false (without quotes)
find_outputs_by_sensitivity = func(sensitive) {
  outputs = filter tfconfig.outputs as address, o {
  	o.sensitive is sensitive
  }

  return outputs
}

### find_all_module_calls ###
# Find all module calls using the tfconfig/v2 import.
find_all_module_calls = func() {
  return tfconfig.module_calls
}

### find_module_calls_in_module ###
# Find all direct module calls made from a specific module
# using the tfconfig/v2 import.
# The parameter, module_address, should be "" for the root module,
# "module.A" for a module A called by the root module,
# "module.A.module.B" for module B called by module A called by the root module,
# and so on.
find_module_calls_in_module = func(module_address) {
  module_calls = filter tfconfig.module_calls as address, mc {
  	mc.module_address is module_address
  }

  return module_calls
}

### find_descendant_modules ###
# Find addresses of all modules called directly or indirectly by a module.
# The provided module address is included.
# To find all module addresses, call find_descendant_modules("")
# After calling this function against "", you can call find_module_calls_in_module
# against any item in the list that is returned.
find_descendant_modules = func(module_address) {
  module_addresses = [module_address]
  mcs = find_module_calls_in_module(module_address)
  if length(mcs) > 0 {
    for mcs as ma, mc {
      if mc.module_address is "" {
        new_module_address = "module." + mc.name
      } else {
        new_module_address = mc.module_address + ".module." + mc.name
      }
      module_addresses += find_descendant_modules(new_module_address)
    }
  }
  return module_addresses
}

### print_violations ###
# Prints violations returned by any of the filter functions defined below.
# This would normally only be called if the filter function had been called
# with prtmsg set to false, which is sometimes done when processing resources
# and their blocks.
# If the result of a filter function is assigned to a map like violatingIRs,
# then you should pass violatingIRs["message"] as the first argument.
# The prefix argument is printed before the message of each resource.
print_violations = func(messages, prefix) {
  for messages as address, message {
    print(prefix, message)
  }
  return true
}

### to_string ###
# Convert objects of unknown type to string
# It is used to build messages added to the messages map returned by the
# filter functions
to_string = func(obj) {
  case types.type_of(obj) {
    when "string":
      return obj
    when "int", "float", "bool":
      return string(obj)
    when "null":
      return "null"
    when "undefined":
      return "undefined"
    when "list":
      output = "["
      lastIndex = length(obj) - 1
      for obj as index, value {
        if index < lastIndex {
          output += to_string(value) + ", "
        } else {
          output += to_string(value)
        }
      }
      output += "]"
      return output
    when "map":
      output = "{"
      theKeys = keys(obj)
      lastIndex = length(theKeys) - 1
      for theKeys as index, key {
        if index < lastIndex {
          output += to_string(key) + ": " + to_string(obj[key]) + ", "
        } else {
          output += to_string(key) + ": " + to_string(obj[key]) + "}"
        }
      }
      return output
    else:
      return ""
  }
}

### filter_attribute_not_in_list ###
# Filter a list of items such as providers to those with a specified
# attribute (attr) that is not in a given list of allowed values (allowed).
# The parameter, attr, can only be a top-level attribute of the collection, items.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to disallow null, include "null" in the list (forbidden).
filter_attribute_not_in_list = func(items, attr, allowed, prtmsg) {
  violators = {}
  messages = {}

  # Iterate over items
  for items as index, item {
    val = item[attr] else null
    # Check if the value is null
    if val is null {
      val = "null"
    }
    # Check if the value is in the forbidden list
    if val not in allowed {
      # Add the item and a warning message to the violators list
      message = to_string(index) + " has " + to_string(attr) + " with value " +
                to_string(val) + " that is not in the allowed list: " +
                to_string(allowed)
      violators[index] = item
      messages[index] = message
      if prtmsg {
        print(message)
      } // end if prtmsg
    } // end if forbidden
  } // end for items

  return {"items":violators,"messages":messages}
}

### filter_attribute_in_list ###
# Filter a list of items such as providers to those with a specified
# attribute (attr) that is in a given list of forbidden values (forbidden).
# The parameter, attr, can only be a top-level attribute of the collection, items.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to disallow null, include "null" in the list (forbidden).
filter_attribute_in_list = func(items, attr, forbidden, prtmsg) {
  violators = {}
  messages = {}

  # Iterate over items
  for items as index, item {
    val = item[attr] else null
    # Check if the value is null
    if val is null {
      val = "null"
    }
    # Check if the value is in the forbidden list
    if val in forbidden {
      # Add the item and a warning message to the violators list
      message = to_string(index) + " has " + to_string(attr) + " with value " +
                to_string(val) + " that is in the forbidden list: " +
                to_string(forbidden)
      violators[index] = item
      messages[index] = message
      if prtmsg {
        print(message)
      } // end if prtmsg
    } // end if forbidden
  } // end for items

  return {"items":violators,"messages":messages}
}
